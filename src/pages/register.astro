---
import AuthLayout from '../layouts/AuthLayout.astro';
import Card from '../components/atoms/Card.astro';
import Input from '../components/atoms/Input.astro';
import Button from '../components/atoms/Button.astro';
---

<AuthLayout title="Registrarse - SecureLife">
  <div class="max-w-2xl w-full space-y-8">
    <Card>
      <h2 class="text-2xl font-bold text-center text-gray-900 mb-6">
        Crear Cuenta
      </h2>
      
      <form id="register-form" class="space-y-6">
        <!-- Información Personal -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Input
            type="text"
            name="nombre"
            label="Nombre"
            placeholder="Tu nombre"
            required
          />
          
          <Input
            type="text"
            name="apellido"
            label="Apellido"
            placeholder="Tu apellido"
            required
          />
        </div>
        
        <Input
          type="email"
          name="email"
          label="Correo electrónico"
          placeholder="tu@email.com"
          required
        />
        
        <Input
          type="tel"
          name="telefono"
          label="Teléfono"
          placeholder="+57 300 000 0000"
        />
        
        <!-- Información de Ubicación -->
        <div class="border-t border-gray-200 pt-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Información de Ubicación</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Departamento <span class="text-red-500">*</span>
              </label>
              <select 
                name="departamento_id" 
                id="departamento-select"
                required
                class="block w-full rounded-xl border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm"
              >
                <option value="">Selecciona un departamento</option>
              </select>
            </div>
            
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Ciudad <span class="text-red-500">*</span>
              </label>
              <select 
                name="ciudad_id" 
                id="ciudad-select"
                required
                disabled
                class="block w-full rounded-xl border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
              >
                <option value="">Primero selecciona un departamento</option>
              </select>
            </div>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            <Input
              type="text"
              name="direccion"
              label="Dirección"
              placeholder="Calle 123 #45-67"
              required
            />
            
            <Input
              type="text"
              name="barrio"
              label="Barrio"
              placeholder="Nombre del barrio"
            />
          </div>
        </div>
        
        <!-- Contraseñas -->
        <div class="border-t border-gray-200 pt-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Seguridad</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Input
              type="password"
              name="password"
              label="Contraseña"
              placeholder="Mínimo 8 caracteres"
              required
            />
            
            <Input
              type="password"
              name="confirm_password"
              label="Confirmar contraseña"
              placeholder="Confirma tu contraseña"
              required
            />
          </div>
        </div>
        
        <div class="flex items-center">
          <input
            id="terms"
            name="terms"
            type="checkbox"
            required
            class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
          />
          <label for="terms" class="ml-2 block text-sm text-gray-900">
            Acepto los <a href="/terminos" class="text-primary-600 hover:text-primary-500">términos y condiciones</a>
          </label>
        </div>
        
        <Button type="submit" class="w-full" id="submit-btn">
          Crear Cuenta
        </Button>
        
        <div class="text-center">
          <p class="text-sm text-gray-600">
            ¿Ya tienes una cuenta?
            <a href="/login" class="font-medium text-primary-600 hover:text-primary-500">
              Iniciar sesión
            </a>
          </p>
        </div>
      </form>
    </Card>
  </div>
</AuthLayout>

<script>

import { LocationService } from '../services/location.service';

  let departamentos: any[] = [];
  let ciudades: any[] = [];

  // Cargar departamentos al inicializar
  async function loadDepartamentos() {
    try {
      departamentos = await LocationService.getDepartamentos();
      const select = document.getElementById('departamento-select') as HTMLSelectElement;
      
      if (select) {
        // Limpiar opciones existentes (excepto la primera)
        while (select.children.length > 1) {
          select.removeChild(select.lastChild!);
        }
        
        // Agregar opciones de departamentos
        departamentos.forEach(depto => {
          const option = document.createElement('option');
          option.value = depto.id_depar.toString();
          option.textContent = depto.nombre;
          select.appendChild(option);
        });
      }
    } catch (error) {
      console.error('Error cargando departamentos:', error);
    }
  }

  // Cargar ciudades cuando se selecciona un departamento
  async function loadCiudades(departamentoId: number) {
    try {
      ciudades = await LocationService.getCiudadesByDepartamento(departamentoId);
      const select = document.getElementById('ciudad-select') as HTMLSelectElement;
      
      if (select) {
        // Limpiar opciones existentes
        select.innerHTML = '<option value="">Selecciona una ciudad</option>';
        
        // Habilitar el select
        select.disabled = false;
        select.classList.remove('disabled:bg-gray-100', 'disabled:cursor-not-allowed');
        
        // Agregar opciones de ciudades
        ciudades.forEach(ciudad => {
          const option = document.createElement('option');
          option.value = ciudad.id_ciudad.toString();
          option.textContent = ciudad.nombre;
          select.appendChild(option);
        });
      }
    } catch (error) {
      console.error('Error cargando ciudades:', error);
    }
  }

  // Event listener para cambio de departamento
  document.getElementById('departamento-select')?.addEventListener('change', (e) => {
    const target = e.target as HTMLSelectElement;
    const departamentoId = parseInt(target.value);
    
    if (departamentoId) {
      loadCiudades(departamentoId);
    } else {
      // Deshabilitar select de ciudades
      const ciudadSelect = document.getElementById('ciudad-select') as HTMLSelectElement;
      if (ciudadSelect) {
        ciudadSelect.disabled = true;
        ciudadSelect.innerHTML = '<option value="">Primero selecciona un departamento</option>';
        ciudadSelect.classList.add('disabled:bg-gray-100', 'disabled:cursor-not-allowed');
      }
    }
  });

  // Cargar departamentos al inicializar la página
  document.addEventListener('DOMContentLoaded', loadDepartamentos);

  // Manejar envío del formulario
  document.getElementById('register-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const originalText = submitBtn.textContent;
    
    // Deshabilitar botón y mostrar loading
    submitBtn.disabled = true;
    submitBtn.textContent = 'Creando cuenta...';
    
    const formData = new FormData(e.target as HTMLFormElement);
    const password = formData.get('password') as string;
    const confirmPassword = formData.get('confirm_password') as string;
    
    if (password !== confirmPassword) {
      alert('Las contraseñas no coinciden');
      submitBtn.disabled = false;
      submitBtn.textContent = originalText;
      return;
    }

    if (password.length < 8) {
      alert('La contraseña debe tener al menos 8 caracteres');
      submitBtn.disabled = false;
      submitBtn.textContent = originalText;
      return;
    }
    
    const userData = {
      nombre: formData.get('nombre') as string,
      apellido: formData.get('apellido') as string,
      direccion: formData.get('direccion') as string,
      barrio: formData.get('barrio') as string,
      ciudadId: parseInt(formData.get('ciudad_id') as string),
      telefono: parseInt(formData.get('telefono') as string),
      email: formData.get('email') as string,
    };
    
    const email = formData.get('email') as string;
    
    try {
      // Importar dinámicamente para evitar problemas de SSR
      const { register } = await import('../stores/auth');
      const result = await register(email, password, userData);
      
      if (result.success) {
        alert('¡Cuenta creada exitosamente! Revisa tu correo para verificar tu cuenta.');
        window.location.href = '/login';
      } else {
        alert(result.error || 'Error al crear la cuenta');
      }
    } catch (error: any) {
      console.error('Error de registro:', error);
      alert(error.message || 'Error al crear la cuenta. Inténtalo de nuevo.');
    } finally {
      // Rehabilitar botón
      submitBtn.disabled = false;
      submitBtn.textContent = originalText;
    }
  });
</script>
</AuthLayout>